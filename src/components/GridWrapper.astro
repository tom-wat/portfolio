---
const calcurateGrid = (paddingRem, columnNumber, gapRem) => {
  const gutterNumber = columnNumber - 1;
  const restWidth = paddingRem * 2 + gapRem * gutterNumber;
  return {
    padding: `${paddingRem}rem`,
    column: columnNumber,
    gap: `${gapRem}rem`,
    restWidth: `${restWidth}rem`,
  };
};
const {
  paddingPC,
  columnPC,
  gapPC,
  paddingTab,
  columnTab,
  gapTab,
  paddingSp,
  columnSp,
  gapSp,
} = Astro.props;
const {
  padding: paddingPCVar,
  column: columnPCVar,
  gap: gapPCVar,
  restWidth: restWidthPCVar,
} = calcurateGrid(paddingPC, columnPC, gapPC);
const {
  padding: paddingTabVar,
  column: columnTabVar,
  gap: gapTabVar,
  restWidth: restWidthTabVar,
} = calcurateGrid(paddingTab, columnTab, gapTab);
const {
  padding: paddingSpVar,
  column: columnSpVar,
  gap: gapSpVar,
  restWidth: restWidthSpVar,
} = calcurateGrid(paddingSp, columnSp, gapSp);
---

<div class="wrapper">
  <slot />
</div>

<style
  define:vars={{
    paddingPCVar,
    gapPCVar,
    columnPCVar,
    restWidthPCVar,
    paddingTabVar,
    gapTabVar,
    columnTabVar,
    restWidthTabVar,
    paddingSpVar,
    gapSpVar,
    columnSpVar,
    restWidthSpVar,
  }}
>
  .wrapper {
    padding: var(--paddingSpVar);
    width: 100%;
    display: grid;
    gap: var(--gapSpVar);
    grid-template-columns: repeat(
      var(--columnSpVar),
      calc((100vw - var(--restWidthSpVar)) / var(--columnSpVar))
    );
    grid-auto-rows: auto;
    /* max-width: 1800px;
    margin: 0 auto; */
    @media (min-width: 768px) {
      padding: var(--paddingTabVar);
      gap: var(--gapTabVar);
      grid-template-columns: repeat(
        var(--columnTabVar),
        calc((100vw - var(--restWidthTabVar)) / var(--columnTabVar))
      );
    }
    @media (min-width: 1025px) {
      padding: var(--paddingPCVar);
      gap: var(--gapPCVar);
      grid-template-columns: repeat(
        var(--columnPCVar),
        calc((100vw - var(--restWidthPCVar)) / var(--columnPCVar))
      );
    }
  }
</style>
